
#主数据源
first.spring.datasource.url = jdbc:mysql://11.4.74.51:800/booking?useUnicode=true&characterEncoding=utf-8&useSSL=false
first.spring.datasource.username = root
first.spring.datasource.password =wuzuquan
first.spring.datasource.driver-class-name = com.mysql.jdbc.Driver
first.spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
first.spring.datasource.initialSize=5
#最小空闲连接数
first.spring.datasource.minIdle=2
first.spring.datasource.maxActive=20
# 等待超时的时间，单位毫秒
first.spring.datasource.maxWait=20000
#dbserver有闲置连接的超时时间。所以在使用长时间空闲连接之前，进行ping操作，确保是有效的连接
#first.spring.datasource.poolPingEnabled=true
#first.spring.datasource.poolPingQuery=select 1 from dual
#闲置时间超过某个时间的连接，进行ping,单位毫秒
#first.spring.datasource.poolPingConnectionsNotUsedFor=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
first.spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
first.spring.datasource.minEvictableIdleTimeMillis=300000
#检查连接是否有效，申请连接的时候检查空闲连接
first.spring.datasource.validationQuery=SELECT 1 FROM DUAL
first.spring.datasource.testWhileIdle=true
first.spring.datasource.testOnBorrow=false
first.spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
first.spring.datasource.poolPreparedStatements=true
first.spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
first.spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
first.spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true



#第二数据源
framedb.spring.datasource.url = jdbc:oracle:thin:@192.168.84.235:1521:x64devdb
framedb.spring.datasource.username = itfw_app
framedb.spring.datasource.password = itiu0pk
framedb.spring.datasource.driver-class-name = oracle.jdbc.OracleDriver
framedb.spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
framedb.spring.datasource.initialSize=5
#最小空闲连接数
framedb.spring.datasource.minIdle=2
framedb.spring.datasource.maxActive=50
# 等待超时的时间，单位毫秒
framedb.spring.datasource.maxWait=20000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
framedb.spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
framedb.spring.datasource.minEvictableIdleTimeMillis=300000
#检查连接是否有效，申请连接的时候检查空闲连接
framedb.spring.datasource.validationQuery=SELECT 1 FROM DUAL
framedb.spring.datasource.testWhileIdle=true
framedb.spring.datasource.testOnBorrow=false
framedb.spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
framedb.spring.datasource.poolPreparedStatements=true
framedb.spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
#framedb.spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
#framedb.spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true

#redis客户端redisson配置
spring.redisson.nodeAddresses[0]=redis://11.4.74.45:6000
spring.redisson.nodeAddresses[1]=redis://11.4.74.47:6000
spring.redisson.nodeAddresses[2]=redis://11.4.74.44:6000
spring.redisson.nodeAddresses[3]=redis://11.4.74.48:6000
spring.redisson.nodeAddresses[4]=redis://11.4.74.49:6000
spring.redisson.nodeAddresses[5]=redis://11.4.74.50:6000
#redis集群密码，默认为空
#spring.redisson.password=123
spring.redisson.readMode=MASTER_SLAVE
#连接空闲超时
spring.redisson.idleConnectionTimeout=20000
#重试次数
spring.redisson.retryAttempts=1
spring.redisson.slaveConnectionMinimumIdleSize=30
spring.redisson.masterConnectionMinimumIdleSize=30
spring.redisson.maxConnectionSize=300

#rocketmq配置
spring.rocketmq.producer.nameServer=11.4.74.49:9876;11.4.74.48:9876
#各自设置生产者组
spring.rocketmq.producer.group=my-group
spring.rocketmq.producer.instanceName=111
spring.rocketmq.producer.retryTimesWhenSendAsyncFailed=0
spring.rocketmq.producer.sendMsgTimeout=20000
spring.rocketmq.producer.compressMsgBodyOverHowmuch=4096
spring.rocketmq.producer.maxMessageSize=4194304
spring.rocketmq.producer.retryAnotherBrokerWhenNotStoreOk=false
spring.rocketmq.producer.retryTimesWhenSendFailed=2
#各自设置消费者组
spring.rocketmq.producer.pushConsumerGroup=push-consumer-group1
spring.rocketmq.producer.pullConsumerGroup=pull-consumer-group1
#定义监控相对路径
management.context-path=/metrics
management.security.enabled=false


#spring cloud 相关配置
#注册中心、服务发现
spring.cloud.consul.host=11.4.74.45
spring.cloud.consul.port=800
spring.cloud.consul.discovery.prefer-ip-address=true
spring.cloud.consul.discovery.healthCheckPath=/metrics/health


spring.cloud.consul.discovery.tags=service
spring.cloud.consul.discovery.instance-id= ${spring.application.name}:${spring.cloud.client.ipAddress}:${spring.application.instance_id:${server.port}}

#指定链路监控服务器
#spring.zipkin.base-url=http://11.4.74.48:7000
spring.sleuth.scheduled.enabled=false
spring.zipkin.sender.type=kafka
spring.kafka.bootstrap-servers=11.4.74.45:9092,11.4.74.47:9092,11.4.74.50:9092
#50毫秒的延迟发送，批量发送
spring.kafka.properties.linger.ms=50
spring.kafka.properties.acks=1
#默认用zipkin 这个topic
#spring.cloud.stream.kafka
#topic:log-application
#groupid: test
spring.sleuth.sampler.percentage=1
